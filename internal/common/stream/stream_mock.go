// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/stream/stream.go

// Package stream is a generated GoMock package.
package stream

import (
	reflect "reflect"

	domain "gitlab.karlson.dev/individual/pet_gonote/note_service/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close))
}

// Destroy mocks base method.
func (m *MockStream) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockStreamMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockStream)(nil).Destroy))
}

// Done mocks base method.
func (m *MockStream) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockStreamMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockStream)(nil).Done))
}

// Drain mocks base method.
func (m *MockStream) Drain() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Drain")
}

// Drain indicates an expected call of Drain.
func (mr *MockStreamMockRecorder) Drain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drain", reflect.TypeOf((*MockStream)(nil).Drain))
}

// Err mocks base method.
func (m *MockStream) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStreamMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStream)(nil).Err))
}

// ErrChan mocks base method.
func (m *MockStream) ErrChan() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrChan")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// ErrChan indicates an expected call of ErrChan.
func (mr *MockStreamMockRecorder) ErrChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrChan", reflect.TypeOf((*MockStream)(nil).ErrChan))
}

// ErrClose mocks base method.
func (m *MockStream) ErrClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrClose")
}

// ErrClose indicates an expected call of ErrClose.
func (mr *MockStreamMockRecorder) ErrClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrClose", reflect.TypeOf((*MockStream)(nil).ErrClose))
}

// Fail mocks base method.
func (m *MockStream) Fail(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fail", err)
}

// Fail indicates an expected call of Fail.
func (mr *MockStreamMockRecorder) Fail(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fail", reflect.TypeOf((*MockStream)(nil).Fail), err)
}

// InClose mocks base method.
func (m *MockStream) InClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InClose")
}

// InClose indicates an expected call of InClose.
func (mr *MockStreamMockRecorder) InClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InClose", reflect.TypeOf((*MockStream)(nil).InClose))
}

// InProxyClose mocks base method.
func (m *MockStream) InProxyClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InProxyClose")
}

// InProxyClose indicates an expected call of InProxyClose.
func (mr *MockStreamMockRecorder) InProxyClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InProxyClose", reflect.TypeOf((*MockStream)(nil).InProxyClose))
}

// InProxyRead mocks base method.
func (m *MockStream) InProxyRead() <-chan *domain.Note {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InProxyRead")
	ret0, _ := ret[0].(<-chan *domain.Note)
	return ret0
}

// InProxyRead indicates an expected call of InProxyRead.
func (mr *MockStreamMockRecorder) InProxyRead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InProxyRead", reflect.TypeOf((*MockStream)(nil).InProxyRead))
}

// InProxyWrite mocks base method.
func (m *MockStream) InProxyWrite(note *domain.Note) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InProxyWrite", note)
}

// InProxyWrite indicates an expected call of InProxyWrite.
func (mr *MockStreamMockRecorder) InProxyWrite(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InProxyWrite", reflect.TypeOf((*MockStream)(nil).InProxyWrite), note)
}

// InRead mocks base method.
func (m *MockStream) InRead() <-chan *domain.Note {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InRead")
	ret0, _ := ret[0].(<-chan *domain.Note)
	return ret0
}

// InRead indicates an expected call of InRead.
func (mr *MockStreamMockRecorder) InRead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InRead", reflect.TypeOf((*MockStream)(nil).InRead))
}

// InWrite mocks base method.
func (m *MockStream) InWrite(note *domain.Note) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InWrite", note)
}

// InWrite indicates an expected call of InWrite.
func (mr *MockStreamMockRecorder) InWrite(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InWrite", reflect.TypeOf((*MockStream)(nil).InWrite), note)
}

// OutClose mocks base method.
func (m *MockStream) OutClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutClose")
}

// OutClose indicates an expected call of OutClose.
func (mr *MockStreamMockRecorder) OutClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutClose", reflect.TypeOf((*MockStream)(nil).OutClose))
}

// OutRead mocks base method.
func (m *MockStream) OutRead() <-chan uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutRead")
	ret0, _ := ret[0].(<-chan uint64)
	return ret0
}

// OutRead indicates an expected call of OutRead.
func (mr *MockStreamMockRecorder) OutRead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutRead", reflect.TypeOf((*MockStream)(nil).OutRead))
}

// OutWrite mocks base method.
func (m *MockStream) OutWrite(note uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutWrite", note)
}

// OutWrite indicates an expected call of OutWrite.
func (mr *MockStreamMockRecorder) OutWrite(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutWrite", reflect.TypeOf((*MockStream)(nil).OutWrite), note)
}

// SetUser mocks base method.
func (m *MockStream) SetUser(user *domain.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", user)
}

// SetUser indicates an expected call of SetUser.
func (mr *MockStreamMockRecorder) SetUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockStream)(nil).SetUser), user)
}

// User mocks base method.
func (m *MockStream) User() *domain.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(*domain.User)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockStreamMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockStream)(nil).User))
}
