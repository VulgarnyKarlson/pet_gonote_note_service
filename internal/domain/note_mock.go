// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/note.go

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNoteService is a mock of NoteService interface.
type MockNoteService struct {
	ctrl     *gomock.Controller
	recorder *MockNoteServiceMockRecorder
}

// MockNoteServiceMockRecorder is the mock recorder for MockNoteService.
type MockNoteServiceMockRecorder struct {
	mock *MockNoteService
}

// NewMockNoteService creates a new mock instance.
func NewMockNoteService(ctrl *gomock.Controller) *MockNoteService {
	mock := &MockNoteService{ctrl: ctrl}
	mock.recorder = &MockNoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteService) EXPECT() *MockNoteServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNoteService) Create(ctx context.Context, user *User, st Stream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx, user, st)
}

// Create indicates an expected call of Create.
func (mr *MockNoteServiceMockRecorder) Create(ctx, user, st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNoteService)(nil).Create), ctx, user, st)
}

// Delete mocks base method.
func (m *MockNoteService) Delete(ctx context.Context, user *User, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, user, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockNoteServiceMockRecorder) Delete(ctx, user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNoteService)(nil).Delete), ctx, user, id)
}

// ReadByID mocks base method.
func (m *MockNoteService) ReadByID(ctx context.Context, user *User, id string) (*Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByID", ctx, user, id)
	ret0, _ := ret[0].(*Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByID indicates an expected call of ReadByID.
func (mr *MockNoteServiceMockRecorder) ReadByID(ctx, user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByID", reflect.TypeOf((*MockNoteService)(nil).ReadByID), ctx, user, id)
}

// Search mocks base method.
func (m *MockNoteService) Search(ctx context.Context, user *User, criteria *SearchCriteria) ([]*Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, user, criteria)
	ret0, _ := ret[0].([]*Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockNoteServiceMockRecorder) Search(ctx, user, criteria interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNoteService)(nil).Search), ctx, user, criteria)
}

// Update mocks base method.
func (m *MockNoteService) Update(ctx context.Context, user *User, note *Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNoteServiceMockRecorder) Update(ctx, user, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoteService)(nil).Update), ctx, user, note)
}
