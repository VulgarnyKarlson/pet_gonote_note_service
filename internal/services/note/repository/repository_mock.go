// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/note/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	stream "gitlab.karlson.dev/individual/pet_gonote/note_service/internal/common/stream"
	domain "gitlab.karlson.dev/individual/pet_gonote/note_service/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockRepository) CreateNote(ctx context.Context, st stream.Stream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateNote", ctx, st)
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockRepositoryMockRecorder) CreateNote(ctx, st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockRepository)(nil).CreateNote), ctx, st)
}

// DeleteNote mocks base method.
func (m *MockRepository) DeleteNote(ctx context.Context, user *domain.User, id uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, user, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockRepositoryMockRecorder) DeleteNote(ctx, user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockRepository)(nil).DeleteNote), ctx, user, id)
}

// ReadNoteByID mocks base method.
func (m *MockRepository) ReadNoteByID(ctx context.Context, user *domain.User, id uint64) (*domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNoteByID", ctx, user, id)
	ret0, _ := ret[0].(*domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNoteByID indicates an expected call of ReadNoteByID.
func (mr *MockRepositoryMockRecorder) ReadNoteByID(ctx, user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNoteByID", reflect.TypeOf((*MockRepository)(nil).ReadNoteByID), ctx, user, id)
}

// SearchNote mocks base method.
func (m *MockRepository) SearchNote(ctx context.Context, user *domain.User, criteria *domain.SearchCriteria) ([]*domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchNote", ctx, user, criteria)
	ret0, _ := ret[0].([]*domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchNote indicates an expected call of SearchNote.
func (mr *MockRepositoryMockRecorder) SearchNote(ctx, user, criteria interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchNote", reflect.TypeOf((*MockRepository)(nil).SearchNote), ctx, user, criteria)
}

// UpdateNote mocks base method.
func (m *MockRepository) UpdateNote(ctx context.Context, user *domain.User, note *domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, user, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockRepositoryMockRecorder) UpdateNote(ctx, user, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockRepository)(nil).UpdateNote), ctx, user, note)
}
