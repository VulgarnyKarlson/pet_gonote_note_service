// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/noteoutbox/repository.go

// Package noteoutbox is a generated GoMock package.
package noteoutbox

import (
	context "context"
	reflect "reflect"

	v4 "github.com/jackc/pgx/v4"
	domain "gitlab.karlson.dev/individual/pet_gonote/note_service/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, tx v4.Tx, note *domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, tx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, tx, note)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, tx v4.Tx, note *domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, tx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, tx, note)
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(ctx context.Context, tx v4.Tx, note *domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, tx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(ctx, tx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), ctx, tx, note)
}

// GetAllOutbox mocks base method.
func (m *MockRepository) GetAllOutbox(ctx context.Context, tx v4.Tx) ([]*NoteOutbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOutbox", ctx, tx)
	ret0, _ := ret[0].([]*NoteOutbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOutbox indicates an expected call of GetAllOutbox.
func (mr *MockRepositoryMockRecorder) GetAllOutbox(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOutbox", reflect.TypeOf((*MockRepository)(nil).GetAllOutbox), ctx, tx)
}

// MarkAsSent mocks base method.
func (m *MockRepository) MarkAsSent(ctx context.Context, tx v4.Tx, notesOutbox *NoteOutbox) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSent", ctx, tx, notesOutbox)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsSent indicates an expected call of MarkAsSent.
func (mr *MockRepositoryMockRecorder) MarkAsSent(ctx, tx, notesOutbox interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSent", reflect.TypeOf((*MockRepository)(nil).MarkAsSent), ctx, tx, notesOutbox)
}

// Search mocks base method.
func (m *MockRepository) Search(ctx context.Context, tx v4.Tx, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockRepositoryMockRecorder) Search(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), ctx, tx, user)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, tx v4.Tx, note *domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, tx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, tx, note)
}
